#!/bin/sh
#
# Could be better, but it's working as expected
#
# Startup/shutdown script for Wifidog daemon
#
# Date    : 2004-08-25
# Version : 1.0

IPT=/usr/sbin/iptables
WD_DIR=/usr/bin

test_wifidog_is_working () {
  WORKING=$(wdctl status 2>&1 | awk '{ print $3$4 }')
  if [ "$WORKING" = "Connectionrefused" ]; then
    echo "  Wifidog is not working, please start it before"
    exit
  fi
}

test_wifidog_is_not_working () {
  WORKING=$(wdctl status 2>&1 | awk '{ print $3$4 }')
    if [ "$WORKING" != "Connectionrefused" ]; then
      echo "  Wifidog is already working"
      exit
    fi
}

case "$1" in
  start)
    $0 test-module
    echo "Starting Wifidog ..."
    test_wifidog_is_not_working
    $WD_DIR/wifidog
    ;;
  restart)
    $0 stop
    sleep 2
    $0 start
    ;;
  stop)
    echo "Stopping Wifidog ..."
    test_wifidog_is_working
    $WD_DIR/wdctl stop
    ;;
  status)
    test_wifidog_is_working
    $WD_DIR/wdctl status
    ;;
  debug|test-module)

    ### Test ipt_mark with iptables
    test_ipt_mark () {
      IPTABLES_OK=$($IPT -A FORWARD -m mark --mark 2 -j ACCEPT 2>&1 | grep "No chain.target.match")
      if [ -z "$IPTABLES_OK" ]; then
        $IPT -D FORWARD -m mark --mark 2 -j ACCEPT 2>&1
        echo 1
      else
        echo 0
      fi
    }
    ### Test ipt_mac with iptables
    test_ipt_mac () {
      IPTABLES_OK=$($IPT -A INPUT -m mac --mac-source 00:00:00:00:00:00 -j ACCEPT 2>&1 | grep "No chain.target.match")
      if [ -z "$IPTABLES_OK" ]; then
        $IPT -D INPUT -m mac --mac-source 00:00:00:00:00:00 -j ACCEPT 2>&1
        echo 1
      else
        echo 0
      fi
    }

    ### Find a module on disk
    module_exists () {
      EXIST=$(find / -name $1.o 2>/dev/null)
      if [ -n "$EXIST" ]; then
        echo 1
      else
        echo 0
      fi
    }

    ### Test if a module is in memory
    module_in_memory () {
      MODULE=$(lsmod | grep $1 | awk '{print $1}')
      if [ "$MODULE" = "$1" ]; then
        echo 1
      else
        echo 0
      fi
    }

    TEST_IPT_MAC=$(test_ipt_mac)
    TEST_IPT_MAC_MODULE_EXISTS=$(module_exists "ipt_mac")

    echo "Testing for iptables modules"
    if [ "$TEST_IPT_MAC" = "0" ]; then
      echo "  iptables is not working with ipt_mac"
      if [ "$TEST_IPT_MAC_MODULE_EXISTS" = "0" ]; then
        echo "  ipt_mac module is missing, please install it (kernel or module)"
        exit
      else
        echo "  ipt_mac module exists, trying to load"
        insmod ipt_mac > /dev/null
        TEST_IPT_MAC_MODULE_MEMORY=$(module_in_memory "ipt_mac")
        if [ "$TEST_IPT_MAC_MODULE_MEMORY" = "0" ]; then
          echo "  Error: ipt_mac not loaded"
          exit
        else
          echo "  ipt_mac loaded sucessfully"
        fi
      fi
    else
      echo "  ipt_mac  module is working"
    fi

    TEST_IPT_MARK=$(test_ipt_mark)
    TEST_IPT_MARK_MODULE_EXISTS=$(module_exists "ipt_mark")

    if [ "$TEST_IPT_MARK" = "0" ]; then
      echo "  iptables is not working with ipt_mark"
      if [ "$TEST_IPT_MARK_MODULE_EXISTS" = "0" ]; then
        echo "  iptables ipt_mark module missing, please install it (kernel or module)"
        exit
      else
        echo "  ipt_mark module exists, trying to load"
        insmod ipt_mark
        TEST_IPT_MARK_MODULE_MEMORY=$(module_in_memory "ipt_mark")
        if [ "$TEST_IPT_MARK_MODULE_MEMORY" = "0" ]; then
          echo "  Error: ipt_mark not loaded"
          exit
        else
          echo "  ipt_mark loaded sucessfully"
        fi
      fi
      else
    echo "  ipt_mark module is working"
    fi
    ;;
  *)
   echo "Usage: $0 {start|stop|restart|status|test-module}"
   exit 1
esac

